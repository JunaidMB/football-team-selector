last.week.team.a <- filter(historical.teams, team_type == "a" & date == max(date))
last.week.team.b <- filter(historical.teams, team_type == "b" & date == max(date))
last.week.team.a
repeat {
team.a <- df %>% dplyr::sample_frac(.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) < 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) < 4) == TRUE) break
}
team.a
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
current.week.append <- union_all(team.b.append, team.a.append)
current.week.append
foo <- filter(historical.teams, date != max(date))
dplyr::union(current.week.append, foo)
current.week.append
foo
dplyr::union(current.week.append, foo)
?union
historical.teams
historical.teams <- hist.teams
historical.teams
historical.teams
team.a
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
current.week.append <- union_all(team.b.append, team.a.append)
historical.teams <- current.week.append
historical.teams
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date() + 1)
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date() + 1)
current.week.append <- union_all(team.b.append, team.a.append)
current.week.append
current.week.append
historical.teams
if (max(historical.teams$date) != max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, historical.teams)
} else {
historical.teams.new
}
historical.teams.new
if (max(historical.teams$date) != max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, historical.teams)
} else {
historical.teams.new
}
historical.teams.new
historical.teams
current.week.append
historical.teams
current.week.append
historical.teams.new
historical.teams
current.week.append
historical.teams.new
union_all(team.b.append, team.a.append)
historical.teams.new
historical.teams.new
union_all(team.b.append, team.a.append)
union_all(team.b.append, team.a.append) %>% arrange(team_type)
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
if (max(historical.teams$date) != max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(team_type)
}
historical.teams
current.week.append
historical.teams.new
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(team_type, date)
historical.teams.new
dplyr::union(current.week.append, historical.teams) %>% arrange(team_type, date)
dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
if (max(historical.teams$date) != max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
}
historical.teams
current.week.append
historical.teams.new
repeat {
team.a <- df %>% dplyr::sample_frac(.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) < 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) < 4) == TRUE) break
}
# Take current week teams to upload into historical teams
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
# team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date() + 1)
# team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date() + 1)
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
# historical.teams <- current.week.append
historical.teams
current.week.append
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
historical.teams
current.week.append
historical.teams.new
historical.teams %>% mutate(date = date -1)
historical.teams <- historical.teams %>% mutate(date = date -1)
historical.teams
current.week.append
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
historical.teams.new
df <- filter(player.list, playing == 'Y') %>% select(-playing)
# Load historical logs of teams
## Read historical list CSV
## Extract last week's teams
last.week.team.a <- filter(historical.teams, team_type == "a" & date == max(date))
last.week.team.b <- filter(historical.teams, team_type == "b" & date == max(date))
# Assign latest week teams
repeat {
team.a <- df %>% dplyr::sample_frac(.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) < 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) < 4) == TRUE) break
}
# Take current week teams to upload into historical teams
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
# team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date() + 1)
# team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date() + 1)
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
# historical.teams <- current.week.append
# Append onto historical log
if (max(historical.teams$date) != max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
}
historical.teams
historical.teams.new
historical.teams.new
setwd("~/developer/football_team_selector/csv_files")
write.csv(historical.teams.new, file = "/Users/junaidbutt/developer/football_team_selector/csv_files/historical_teams.csv", row.names = FALSE)
player.list
write.csv(player.list, file = "/Users/junaidbutt/developer/football_team_selector/csv_files/prospective_players_sheet.csv", row.names = FALSE)
read_csv('prospective_players_sheet')
read_csv('prospective_players_sheet.csv')
read_csv('prospective_players_sheet.csv')
# write.csv(player.list, file = "/Users/junaidbutt/developer/football_team_selector/csv_files/prospective_players_sheet.csv", row.names = FALSE)
read_csv('historical_teams.csv')
current.week.append
historical.teams
historical.teams.new
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
historical.teams.new
read_csv('historical_teams.csv')
player.list <- read_csv('prospective_players_sheet.csv')
player.list
df <- filter(player.list, playing == 'Y') %>% select(-playing)
df
historical.teams <- read_csv('historical_teams.csv')
historical.teams
last.week.team.a <- filter(historical.teams, team_type == "a" & date == max(date))
last.week.team.b <- filter(historical.teams, team_type == "b" & date == max(date))
repeat {
team.a <- df %>% dplyr::sample_frac(.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) < 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) < 4) == TRUE) break
}
team.a
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
if (max(historical.teams$date) != max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
}
historical.teams.new
current.week.append
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
historical.teams.new
historical.teams
current.week.append
dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
current.week.append
historical.teams
filter(historical.teams, date != max(historical.teams$date))
current.week.append
historical.teams.new <- dplyr::union(current.week.append, filter(historical.teams, date != max(historical.teams$date)) ) %>% arrange(date, team_type)
historical.teams.new
max(historical.teams$date)
max(current.week.append$date)
max(historical.teams$date) != max(current.week.append$date)
historical.teams.new
repeat {
team.a <- df %>% dplyr::sample_frac(.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) < 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) < 4) == TRUE) break
}
# Take current week teams to upload into historical teams
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
historical.teams
team.a
team.b
current.week.append
if (max(historical.teams$date) == max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, filter(historical.teams, date != max(historical.teams$date)) ) %>% arrange(date, team_type)
} else {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
}
historical.teams.new
team.b
repeat {
team.a <- df %>% dplyr::sample_frac(.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) < 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) < 4) == TRUE) break
}
# Take current week teams to upload into historical teams
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
team.a
team.b
current.week.append
if (max(historical.teams$date) == max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, filter(historical.teams, date != max(historical.teams$date)) ) %>% arrange(date, team_type)
} else {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
}
historical.teams.new
length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids))
team.a$player.ids
last.week.team.a$player.ids
last.week.team.a
read_csv('historical_teams.csv')
filter(historical.teams, team_type == "a" & date == max(date))
historical.teams.new
current.week.append
player.list <- read_csv('prospective_players_sheet.csv')
df <- filter(player.list, playing == 'Y') %>% select(-playing)
# Load historical logs of teams
## Read historical list CSV
historical.teams <- read_csv('historical_teams.csv')
## Extract last week's teams
last.week.team.a <- filter(historical.teams, team_type == "a" & date == max(date))
last.week.team.b <- filter(historical.teams, team_type == "b" & date == max(date))
# Assign latest week teams
repeat {
team.a <- df %>% dplyr::sample_frac(.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) < 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) < 4) == TRUE) break
}
# Take current week teams to upload into historical teams
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
# Append onto historical log
if (max(historical.teams$date) == max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, filter(historical.teams, date != max(historical.teams$date)) ) %>% arrange(date, team_type)
} else {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
}
historical.teams.new
player.list <- read_csv('prospective_players_sheet.csv')
df <- filter(player.list, playing == 'Y') %>% select(-playing)
# Load historical logs of teams
## Read historical list CSV
historical.teams <- read_csv('historical_teams.csv')
## Extract last week's teams
last.week.team.a <- filter(historical.teams, team_type == "a" & date == max(date))
last.week.team.b <- filter(historical.teams, team_type == "b" & date == max(date))
# Assign latest week teams
repeat {
team.a <- df %>% dplyr::sample_frac(.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) < 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) < 4) == TRUE) break
}
# Take current week teams to upload into historical teams
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
# Append onto historical log
if (max(historical.teams$date) == max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, filter(historical.teams, date != max(historical.teams$date)) ) %>% arrange(date, team_type)
} else {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
}
historical.teams.new
player.list
View(player.list)
install.packages("googlesheets")
library(googlesheets)
# which google sheets do you have access to?
# may ask you to authenticate in a browser!
gs_ls()
# may ask you to authenticate in a browser!
gs_ls()
# which google sheets do you have access to?
# may ask you to authenticate in a browser!
gs_ls()
install.packages('gsheet')
library(gsheet)
gsheet2tbl('https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0')
gsheet2text(url = 'https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0')
?gsheet2tbl
gsheet2tbl('https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0')
a <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0')
a
a$`<!DOCTYPE html>`
a <- gsheet2tbl('docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0')
a
extract_key_from_url(https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0)
googlesheets::
extract_key_from_url('https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0')
gs_title('https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0', verbose = TRUE)
gs_url('https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0', verbose = TRUE)
ppl <- gs_url('https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0', verbose = TRUE)
gs_read(ss = be, ws = "Sheet1")
gs_read(ss = ppl, ws = "Sheet1")
foo <- gs_read(ss = ppl, ws = "Sheet1")
foo
class(foo)
typeof(foo)
foo <- data.frame(gs_read(ss = ppl, ws = "Sheet1"))
foo
class(foo)
foo
historical.teams.new
gs_upload(historical.teams.new, sheet_title = "historical_teams.csv", row.names = FALSE ,verbose = TRUE, overwrite = TRUE)
?gs_upload
gs_upload(file = historical.teams.new, sheet_title = "historical_teams.csv", verbose = TRUE, overwrite = TRUE)
gs_upload(file = "/Users/junaidbutt/developer/football_team_selector/csv_files/historical_teams.csv", sheet_title = "historical_teams", verbose = TRUE, overwrite = TRUE)
ht <- gs_url('https://docs.google.com/spreadsheets/d/19HIPklKbaYv9i4g2bol0tiHlS0CTkHCfKY601H-Y3mw/edit#gid=316725927', verbose = TRUE)
bar <- data.frame(gs_read(ss = ht, ws = "Sheet1"))
bar <- data.frame(gs_read(ss = ht, ws = "historical_teams"))
bar
ppl <- gs_url('https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0', verbose = TRUE)
player.list <- data.frame(gs_read(ss = ppl, ws = "Sheet1"))
df <- filter(player.list, playing == 'Y') %>% select(-playing)
ht <- gs_url('https://docs.google.com/spreadsheets/d/19HIPklKbaYv9i4g2bol0tiHlS0CTkHCfKY601H-Y3mw/edit#gid=316725927', verbose = TRUE)
historical.teams <- data.frame(gs_read(ss = ht, ws = "historical_teams"))
last.week.team.a <- filter(historical.teams, team_type == "a" & date == max(date))
last.week.team.b <- filter(historical.teams, team_type == "b" & date == max(date))
repeat {
team.a <- df %>% dplyr::sample_frac(.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) <= 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) <= 3) == TRUE) break
}
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
if (max(historical.teams$date) == max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, filter(historical.teams, date != max(historical.teams$date)) ) %>% arrange(date, team_type)
} else {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
}
write.csv(historical.teams.new, file = "/Users/junaidbutt/developer/football_team_selector/csv_files/historical_teams.csv", row.names = FALSE)
# Upload historical team to GS
gs_upload(file = "/Users/junaidbutt/developer/football_team_selector/csv_files/historical_teams.csv", sheet_title = "historical_teams", verbose = TRUE, overwrite = TRUE)
df %>% dplyr::sample_frac(.5)
?sample_frac
ppl <- gs_url('https://docs.google.com/spreadsheets/d/1RI5k3lTVfHCUmegUT9YvdDnH14HHRw82vivqp5egU5k/edit#gid=0', verbose = TRUE)
player.list <- data.frame(gs_read(ss = ppl, ws = "Sheet1"))
df <- filter(player.list, playing == 'Y') %>% select(-playing)
# Load historical logs of teams
## Read historical list CSV
# historical.teams <- read_csv('historical_teams.csv')
ht <- gs_url('https://docs.google.com/spreadsheets/d/19HIPklKbaYv9i4g2bol0tiHlS0CTkHCfKY601H-Y3mw/edit#gid=316725927', verbose = TRUE)
historical.teams <- data.frame(gs_read(ss = ht, ws = "historical_teams"))
## Extract last week's teams
last.week.team.a <- filter(historical.teams, team_type == "a" & date == max(date))
last.week.team.b <- filter(historical.teams, team_type == "b" & date == max(date))
# Assign latest week teams
repeat {
team.a <- df %>% dplyr::sample_frac(0.5)
team.b <- dplyr::anti_join(df, team.a, by = 'player.ids')
if ((abs(mean(team.a$scores) - mean(team.b$scores)) <= 2 & length(dplyr::setdiff(team.a$player.ids, last.week.team.a$player.ids)) <= 3) == TRUE) break
}
# Take current week teams to upload into historical teams
team.a.append <- data.frame(team.a, team_type = 'a', date = Sys.Date())
team.b.append <- data.frame(team.b, team_type = 'b', date = Sys.Date())
current.week.append <- dplyr::union_all(team.b.append, team.a.append) %>% arrange(team_type)
# Append onto historical log
if (max(historical.teams$date) == max(current.week.append$date)) {
historical.teams.new <- dplyr::union(current.week.append, filter(historical.teams, date != max(historical.teams$date)) ) %>% arrange(date, team_type)
} else {
historical.teams.new <- dplyr::union(current.week.append, historical.teams) %>% arrange(date, team_type)
}
# Write CSV of historical team
write.csv(historical.teams.new, file = "/Users/junaidbutt/developer/football_team_selector/csv_files/historical_teams.csv", row.names = FALSE)
# Upload historical team to GS
gs_upload(file = "/Users/junaidbutt/developer/football_team_selector/csv_files/historical_teams.csv", sheet_title = "historical_teams", verbose = TRUE, overwrite = TRUE)
player.list
df
iterations <- 0
ransac <- function(data, n, k, t, d) {
iterations <- 0
bestfit <- NULL
besterr <- 1e5
while (iterations < k) {
maybeinliers <- sample(nrow(data), n)
maybemodel <- lm(y ~ x, data = data, subset = maybeinliers)
alsoinliers <- NULL
for (point in setdiff(1:nrow(data), maybeinliers)) {
if (abs(maybemodel$coefficients[2]*data[point, 1] - data[point, 2] + maybemodel$coefficients[1])/(sqrt(maybemodel$coefficients[2] + 1)) < t)
alsoinliers <- c(alsoinliers, point)
}
if (length(alsoinliers) > d) {
bettermodel <- lm(y ~ x, data = data, subset = c(maybeinliers, alsoinliers))
thiserr <- summary(bettermodel)$sigma
if (thiserr < besterr) {
bestfit <- bettermodel
besterr <- thiserr
}
}
iterations <- iterations + 1
}
bestfit
}
mtcars
plot(mtcars$mpg, mtcars$cyl)
plot(mtcars$mpg)
?plot
plot(x = mtcars$drat, y = mtcars$mpg)
?mtcars
plot(x = mtcars$hp, y = mtcars$mpg)
plot(x = mtcars$hp, y = mtcars$mpg)
data.frame(x = mtcars$hp, y = mtcars$mpg)
data <- data.frame(x = mtcars$hp, y = mtcars$mpg)
plot(data)
abline(lm(y ~ x, data = data))
set.seed(123)
abline(ransac(data, n = 10, k = 10, t = 0.5, d = 10), col = "blue")
set.seed(123)
abline(ransac(data, n = 10, k = 10, t = 0.5, d = 10), col = "blue")
plot(data)
abline(lm(y ~ x, data = data))
set.seed(123)
abline(ransac(data, n = 10, k = 10, t = 0.5, d = 10), col = "blue")
ransac <- function(data, n, k, t, d) {
iterations <- 0
bestfit <- NULL
besterr <- 1e5
while (iterations < k) {
maybeinliers <- sample(nrow(data), n)
maybemodel <- lm(y ~ x, data = data, subset = maybeinliers)
alsoinliers <- NULL
for (point in setdiff(1:nrow(data), maybeinliers)) {
if (abs(maybemodel$coefficients[2]*data[point, 1] - data[point, 2] + maybemodel$coefficients[1])/(sqrt(maybemodel$coefficients[2] + 1)) < t)
alsoinliers <- c(alsoinliers, point)
}
if (length(alsoinliers) > d) {
bettermodel <- lm(y ~ x, data = data, subset = c(maybeinliers, alsoinliers))
thiserr <- summary(bettermodel)$sigma
if (thiserr < besterr) {
bestfit <- bettermodel
besterr <- thiserr
}
}
iterations <- iterations + 1
}
bestfit
}
ransac(data, n = 10, k = 10, t = 0.5, d = 10)
ransac <- function(data, n, k, t, d) {
iterations <- 0
bestfit <- NULL
besterr <- 1e5
while (iterations < k) {
maybeinliers <- sample(nrow(data), n)
maybemodel <- lm(y ~ x, data = data, subset = maybeinliers)
alsoinliers <- NULL
for (point in setdiff(1:nrow(data), maybeinliers)) {
if (abs(maybemodel$coefficients[2]*data[point, 1] - data[point, 2] + maybemodel$coefficients[1])/(sqrt(maybemodel$coefficients[2] + 1)) < t)
alsoinliers <- c(alsoinliers, point)
}
if (length(alsoinliers) > d) {
bettermodel <- lm(y ~ x, data = data, subset = c(maybeinliers, alsoinliers))
thiserr <- summary(bettermodel)$sigma
if (thiserr < besterr) {
bestfit <- bettermodel
besterr <- thiserr
}
}
iterations <- iterations + 1
}
bestfit
}
ransac(data, n = 10, k = 10, t = 0.5, d = 10)
data
ransac <- function(data, n, k, t, d) {
iterations <- 0
bestfit <- NULL
besterr <- 1e5
while (iterations < k) {
maybeinliers <- sample(nrow(data), n)
maybemodel <- lm(y ~ x, data = data, subset = maybeinliers)
alsoinliers <- NULL
for (point in setdiff(1:nrow(data), maybeinliers)) {
if (abs(maybemodel$coefficients[2]*data[point, 1] - data[point, 2] + maybemodel$coefficients[1])/(sqrt(maybemodel$coefficients[2] + 1)) < t)
alsoinliers <- c(alsoinliers, point)
}
if (length(alsoinliers) > d) {
bettermodel <- lm(y ~ x, data = data, subset = c(maybeinliers, alsoinliers))
thiserr <- summary(bettermodel)$sigma
if (thiserr < besterr) {
bestfit <- bettermodel
besterr <- thiserr
}
}
iterations <- iterations + 1
}
return(bestfit)
}
ransac(data, n = 10, k = 10, t = 0.5, d = 10)
1e5
sample(nrow(data), n)
nrow(data)
sample(nrow(data), 10)
ransac(data, n = 10, k = 10, t = 0.5, d = 10)
bestfit <- NULL
bestfit
class(bestfit)
07/12/2019
as.Date(07-12-2019)
